/*
* Arcane OTX Ingest Module.
* Implements functions to parse and create nodes within cortex.
*/

init {
    $privsep = $lib.import(arcane.otx.privsep)
    // Used to edge back to our meta:source
    $srcnode = $lib.null
}

function initMetaSource() {

    /*
    * if $srcnode has not already been set then retrieve the meta:source
    * and define the global var $srcnode.
    */
    if ($srcnode = $lib.null) {
        if ($lib.debug) {
            $lib.print("Setting meta:source={source}", source=$modconf.source)
        }
        [ meta:source=$modconf.source :name="arcane-otx" ]
        $srcnode = $node
    }

    /*
    * fini(): stuff here runs *once* after the last node yield (even if
    * there are no nodes)
    */
    fini { return($lib.null) }
}

function addDNS(entry) {

    $rtype = $entry."record_type"

    switch $rtype {
        /*
        * DNS pedantry.
        * SOA records from OTX are pretty bad. They don't provide
        * the full SOA text and will give you an SOA for a
        * "hostname" which is not a zone meaning you could
        * mistakenly define an SOA for say record.zone.tld. rather
        * than zone.tld. There is a difference, people!
        *
        * We check for "asset_type": "domain"
        *
        * Note: The "address" field of a DNS result is the defined
        * nameserver within the SOA record.
        *
        * The email address is missing.
        */
        'SOA': {
            if ($entry.asset_type = "domain") {
                $guid = $lib.guid(
                    $entry.hostname,
                    $entry.address,
                    $entry.first,
                    $entry.last,
                )
                [ inet:dns:soa=$guid :fqdn=$entry.hostname :ns?=$entry.address]
            }
            else {
                if $lib.debug {
                    $lib.print(
                        '{record} ({rtype}) record ignored.',
                        record=$entry.hostname,
                        rtype=$rtype
                    )
                }
            }
        }

        /*
        * DNS pedantry.
        * NS records from OTX are pretty bad. They provide NS
        * records for record.zone.tld. which might not actually be
        * defined in the real DNS zone itself and seems to just be a
        * merge of the NS records for zone.tld. down into what OTX
        * defines as a "hostname" rather than a "domain" asset_type.
        *
        * We check for "asset_type": "domain"
        */
        'NS': {
            if ($entry.asset_type = "domain") {
                [ inet:dns:ns=($entry.hostname, $entry.address) ]
            }
            else {
                if $lib.debug {
                    $lib.warn(
                        '{record} ({rtype}) record ignored.',
                        record=$entry.hostname,
                        rtype=$rtype
                    )
                }
            }
        }

        'AAAA': {
            [ inet:dns:aaaa?=($entry.hostname, $entry.address) ]
        }

        /*
        * TODO: Sometimes OTX DNS records are backwards
        * The hostname is the IP address and the address is the
        * hostname:
        * {
        *   "address": "gmail.com",
        *   "first": "2015-05-06T22:00:00",
        *   "last": "2015-05-06T22:00:00",
        *   "hostname": "74.125.28.18",
        *   "record_type": "A",
        *   "indicator_link": "/indicator/hostname/74.125.28.18",
        *   "flag_url": "assets/images/flags/us.png",
        *   "flag_title": "United States",
        *   "asset_type": "hostname",
        *   "asn": "AS15169 GOOGLE"
        * }
        * Up is down. Left is right! Won't someone please think of the
        * children!
        *
        * WHAT COULD POSSIBLY GO WRONG IF.... we swap around the tuple values?
        */
        'A': {
            [ inet:dns:a?=($entry.hostname, $entry.address) ]
        }

        'CNAME': {
            [ inet:dns:cname=($entry.hostname, $entry.address) ]
        }

        'TXT': {
            $lib.warn('{rtype} type not yet implemented', rtype=$rtype)
        }

        // While not supported anymore SPF was the record type
        // before TXT records were settled on for SPF data. For a
        // time SPF records did exist but it was decided not to use
        // them because many caching resolvers are too old and do
        // not support this lookup. It's still useful to check for
        // their existence in DNS data.
        'SPF': {
            $lib.warn('{rtype} type not yet implemented', rtype=$rtype)
        }

        *: {
            $lib.warn(
                'DNS record type ({rtype}) not supported!',
                rtype=$rtype
            )
        }
    }

    [ .seen?=$entry.first .seen?=$entry.last ]
    [ <(seen)+ { yield $srcnode } ]

    return($node)
}

function addPDNS(passive_dns) {
    for $entry in $passive_dns {
        if ($entry.address = "NXDOMAIN") {continue}
        yield $addDNS($entry)
    }
}

function addPulses(pulses, n=$lib.null) {
    for $pulse in $pulses {
        yield $addPulse($pulse, $n)
    }
}

function addUrl(url, reference=$lib.false) {
    [inet:url?=$url]
    return($node)
}

function addPulseById(pulseid) {

    if $lib.debug {$lib.print("addPulseById()")}

    $pulse = $privsep.getPulse($pulseid)

    yield $addPulse($pulse)
}

function addAuthor(username) {

    $author_url = $lib.str.format(
        'https://otx.alienvault.com/user/{username}/pulses',
        username=$username
    )

    $author_guid = $lib.guid($username, $author_url)

    [ps:contact=$author_guid :url=$author_url]

    return($node)
}

// Create media:news from OTX Pulses.
function addPulse(pulse, n=$lib.null) {

    if $lib.debug {$lib.print($pulse)}

    $guid = $lib.guid(($pulse.id,))
    if $lib.debug {$lib.print($guid)}

    $url = $lib.str.format(
        'https://otx.alienvault.com/pulse/{id}',
        id=$pulse.id
    )

    $author = $addAuthor($pulse.author.username)

    $authors = $lib.list()
    $authors.append($author)

    [
        media:news=$guid
            :url?=$url
            :title?=$pulse.name
            :summary?=$pulse.description
            :authors=$authors
            :published?=$pulse.created
    ]

    $addPulseIndicators($pulse.id, $node)

    // Edge our media news back to the original inbound node.
    if $n {
        [ +(pubioc)> { yield $n } ]
    }

    $references = $pulse.references
    if $references {
        {
            for $ref in $references {
                ($ok, $url) = $lib.trycast(inet:url, $ref)
                if (not $ok) {
                    $lib.warn("Unhandled reference ({ref})", ref=$url)
                    continue
                }
                $url = $addUrl($ref)
                if $url {
                    //[ +(refs)> { yield $url } ]
                    if ($lib.debug) {
                        $lib.print("Adding ref to {ref}", ref=$url.value())
                    }
                    [ +(refs)> {yield $url} ]
                }
            }
        }
    }

    $pulse_tags = $pulse.tags

    if $pulse_tags {
        {
            for $pulse_tag in $pulse_tags {
                ($ok, $t) = $lib.trycast(syn:tag:part, $pulse_tag)

                if (not $ok) {
                    $lib.warn("Unhandled pulse tag ({tag})", tag=$pulse_tag)
                    continue
                }

                $full_tag = $lib.str.format(
                    'rep.alienvault.{leaf}',
                    leaf=$t
                )

                if $lib.debug {
                    $lib.print($full_tag)
                }

                [+#$full_tag]
            }
        }
    }

    [ <(seen)+ { yield $srcnode } ]

    return($node)
}

function addPulseIndicator(pulse_ioc, news=$lib.null) {

    switch $pulse_ioc.type {

        "FileHash-MD5" : {
            [hash:md5?=$pulse_ioc.indicator .seen=($pulse_ioc.created)]
        }
        "FileHash-SHA1" : {
            [hash:sha1?=$pulse_ioc.indicator .seen=($pulse_ioc.created)]
        }
        "FileHash-SHA256" : {
            [hash:sha256?=$pulse_ioc.indicator .seen=($pulse_ioc.created)]
        }
        "FileHash-SHA512" : {
            [hash:sha512?=$pulse_ioc.indicator .seen=($pulse_ioc.created)]
        }
        "IPv4" : {
            [inet:ipv4?=$pulse_ioc.indicator .seen=($pulse_ioc.created)]
        }
        "domain" : {
            [inet:fqdn?=$pulse_ioc.indicator .seen=($pulse_ioc.created)]
        }
        "hostname" : {
            [inet:fqdn?=$pulse_ioc.indicator .seen=($pulse_ioc.created)]
        }
        "URL" : {
            [inet:url?=$pulse_ioc.indicator .seen=($pulse_ioc.created)]
        }
        "email" : {
            [inet:email?=$pulse_ioc.indicator .seen=($pulse_ioc.created)]
        }
        "CIDR" : {
            [inet:cidr4?=$pulse_ioc.indicator]
        }
        "YARA" : {
            [
                it:app:yara:rule=($pulse_ioc.title, $pulse_ioc.content)
                :name?=$pulse_ioc.title
                :text?=$pulse_ioc.content
            ]
        }
        "CVE" : {
            [it:sec:cve?=$pulse_ioc.indicator]
        }
        *: {
            $lib.warn(
                'Unsupported OTX IOC type: {ioc_type}',
                ioc_type=$pulse_ioc.type
            )
        }
    }

    if $xref {
        [ <(pubioc)+ {yield $news} ]
    }

    fini{return($lib.null)}
}

function addPulseIndicators(pulseid, news) {

    $page=1
    $next_page = $lib.true

    while ($next_page != $lib.null) {
        $http_resp = $privsep.getPulseIndicators($pulseid, $page)
        $results = $http_resp.results

        for $res in $results {
            $addPulseIndicator($res, $news)
        }

        $page = ($page + 1)
        $next_page = $http_resp.next
    }

    fini{return($lib.null)}
}

/*
* This can get painful for IPv4 as the URL back from OTX is an FQDN.
* TODO: Something.
*/
function addUrls(n) {

    $page=1
    $has_next = $lib.true

    while $has_next {

        $http_resp = $privsep.getUrls($n, $page)
        $url_list = $http_resp.url_list

        for $url in $url_list {
            $url = $addUrl($url.url)
            yield $url
        }

        $page = ($page + 1)
        $has_next = $http_resp.has_next
    }
}

function enrich(n) {
    switch $n.form() {
        "inet:fqdn": {
            $http_resp = $privsep.getIndicatorsDomain($n, 'passive_dns')
            $passive_dns = $http_resp.passive_dns

            $http_resp = $privsep.getIndicatorsDomain($n, 'general')
            $pulses = $http_resp.pulse_info.pulses

            yield ($addPDNS($passive_dns), $addPulses($pulses, $n), $addUrls($n))
        }
        "inet:ipv4": {
            $http_resp = $privsep.getIndicatorsIPv4($n, 'passive_dns')
            $passive_dns = $http_resp.passive_dns

            $http_resp = $privsep.getIndicatorsIPv4($n, 'general')
            $pulses = $http_resp.pulse_info.pulses

            if $http_resp.asn {
                $m = $lib.regex.search("^AS([0-9]{1,10})\s", $http_resp.asn)
                if $m {
                    $lib.print("ASN Number: {asn}", asn=$m.index(0))
                    {[inet:ipv4?=$http_resp.indicator :asn?=$m.index(0)]}
                }
            }

            yield ($addPDNS($passive_dns), $addPulses($pulses, $n), $addUrls($n))
        }
        "inet:ipv6": {
            $http_resp = $privsep.getIndicatorsIPv6($n, 'passive_dns')
            $passive_dns = $http_resp.passive_dns

            $http_resp = $privsep.getIndicatorsIPv6($n, 'general')
            $pulses = $http_resp.pulse_info.pulses
            yield ($addPDNS($passive_dns), $addPulses($pulses, $n))
        }
        *: {
            $lib.warn("Unsupported form: {form}", form=$n.form())
        }
    }
}

function addPulsesActivity(since=$lib.null) {

    $page=1
    $next_page = $lib.true

    while ($next_page != $lib.null) {
        $http_resp = $privsep.getPulsesActivity($page, $since)
        $results = $http_resp.results

        for $pulse in $results {
            yield $addPulse($pulse)
            //$addPulse($res)
        }

        $page = ($page + 1)
        $next_page = $http_resp.next
    }

    //fini{return($lib.null)}
}
