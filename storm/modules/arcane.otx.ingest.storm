/*
* Arcane OTX Ingest Module.
* Implements functions to parse and create nodes within cortex.
*/

init {
    $api = $lib.import(arcane.otx.api)
    // Used to edge back to our meta:source
    $srcnode = $lib.null
}

function init_meta_source() {

    /*
    * if $srcnode has not already been set then retrieve the meta:source
    * and define the global var $srcnode.
    */
    if ($srcnode = $lib.null) {
        if ($lib.debug) {
            $lib.print("Setting meta:source={source}", source=$modconf.source)
        }
        [ meta:source=$modconf.source :name="arcane-otx" ]
        $srcnode = $node
    }

    /*
    * fini(): stuff here runs *once* after the last node yield (even if
    * there are no nodes)
    */
    fini { return($lib.null) }
}

function add_author(username) {

    $author_url = $lib.str.format(
        'https://otx.alienvault.com/user/{username}/pulses',
        username=$username
    )

    $author_guid = $lib.guid($username, $author_url)

    [ps:contact=$author_guid :url=$author_url]
    [ <(seen)+ { yield $srcnode } ]

    return($node)
}

function add_url(url, reference=$lib.false) {
    [inet:url?=$url]
    [ <(seen)+ { yield $srcnode } ]
    return($node)
}

function add_pulses_activity(since=$lib.null) {

    $page=(1)
    $next_page = $lib.true

    if $since {
        ($ok, $modified_since) = $lib.trycast(time, $since)
        if (not $ok) {
            $lib.warn("Invalid time format ({since})", since=$since)
            yield $lib.null
        }
    }

    $modified_since = $lib.time.format(
        $modified_since,
        '%Y%m%dT%H:%M:%S+00:00'
    )

    while ($next_page != $lib.null) {
        $http_resp = $api.get_pulses_activity($page, $modified_since)
        $results = $http_resp.results
        $page = ($page + 1)
        $next_page = $http_resp.next

        for $pulse in $results {
            // For some reason some data is missing from pulses from the
            // activity feed so we retrieve the full pulse here.
            $p = $api.get_pulse($pulse.id)
            yield $add_pulse($p)
        }
    }
}

// Create media:news from OTX Pulses.
function add_pulse(
    pulse,
    src_node=$lib.null,
    add_iocs=$lib.false,
    ioc_limit=$modconf.ioc_limit
) {

    // if $lib.debug {$lib.print($pulse)}

    $guid = $lib.guid(($pulse.id,))

    $url = $lib.str.format(
        'https://otx.alienvault.com/pulse/{id}',
        id=$pulse.id
    )

    $author = $add_author($pulse.author.username)

    $authors = $lib.list()
    $authors.append($author)

    [
        media:news=$guid
            :url?=$url
            :title?=$pulse.name
            :summary?=$pulse.description
            :authors?=$authors
            :published?=$pulse.created
    ]

    if $add_iocs {
        $add_pulse_indicators($pulse.id, $node, $ioc_limit)
    }

    // Edge our media news back to the original inbound node.
    if $src_node {
        [ +(pubioc)> { yield $src_node } ]
    }

    $references = $pulse.references
    if $references {
        { // subquery
            for $ref in $references {
                ($ok, $url) = $lib.trycast(inet:url, $ref)
                if (not $ok) {
                    $lib.warn("Unhandled reference URL ({ref})", ref=$url)
                    continue
                }

                $url = $add_url($ref)
                if $url {
                    if ($lib.debug) {
                        $lib.print("Adding ref to {ref}", ref=$url.value())
                    }
                    [ +(refs)> {yield $url} ]
                }
            }
        }
    }

    $pulse_tags = $pulse.tags

    if $pulse_tags {
        { // subquery
            for $pulse_tag in $pulse_tags {
                ($ok, $t) = $lib.trycast(syn:tag:part, $pulse_tag)

                if (not $ok) {
                    $lib.warn("Unhandled pulse tag ({tag})", tag=$pulse_tag)
                    continue
                }

                $full_tag = $lib.str.format(
                    'rep.alienvault.{leaf}',
                    leaf=$t
                )

                if $lib.debug {
                    $lib.print($full_tag)
                }

                [+#$full_tag]
            }
        }
    }

    [ <(seen)+ { yield $srcnode } ]

    return($node)
}

function add_pulse_indicators(pulseid, news, ioc_limit) {

    $http_resp = $api.get_pulse_indicators($pulseid)
    $results = $http_resp.results

    if ($results.length() <= $ioc_limit) {
        for $res in $results {
            $add_pulse_indicator($res, $news)
        }
    }
    else {
        $lib.warn(
            "Ignoring pulse: {pulseid}. IOCs too large ({ioc_size})",
            pulseid=$pulseid,
            ioc_size=$results.length()
        )
    }

    fini{return($lib.null)}
}

function add_pulse_indicator(pulse_ioc, xref=$lib.null) {

    switch $pulse_ioc.type {

        "FileHash-MD5" : {
            [hash:md5?=$pulse_ioc.indicator .seen=($pulse_ioc.created)]
        }
        "FileHash-SHA1" : {
            [hash:sha1?=$pulse_ioc.indicator .seen=($pulse_ioc.created)]
        }
        "FileHash-SHA256" : {
            [hash:sha256?=$pulse_ioc.indicator .seen=($pulse_ioc.created)]
        }
        "FileHash-SHA512" : {
            [hash:sha512?=$pulse_ioc.indicator .seen=($pulse_ioc.created)]
        }
        "IPv4" : {
            [inet:ipv4?=$pulse_ioc.indicator .seen=($pulse_ioc.created)]
        }
        "domain" : {
            [inet:fqdn?=$pulse_ioc.indicator .seen=($pulse_ioc.created)]
        }
        "hostname" : {
            [inet:fqdn?=$pulse_ioc.indicator .seen=($pulse_ioc.created)]
        }
        "URL" : {
            [inet:url?=$pulse_ioc.indicator .seen=($pulse_ioc.created)]
        }
        "email" : {
            [inet:email?=$pulse_ioc.indicator .seen=($pulse_ioc.created)]
        }
        "CIDR" : {
            [inet:cidr4?=$pulse_ioc.indicator]
        }
        "YARA" : {
            [
                it:app:yara:rule=($pulse_ioc.title, $pulse_ioc.content)
                :name?=$pulse_ioc.title
                :text?=$pulse_ioc.content
            ]
        }
        "CVE" : {
            [it:sec:cve?=$pulse_ioc.indicator]
        }
        *: {
            $lib.warn(
                'Unsupported OTX IOC type: {ioc_type}',
                ioc_type=$pulse_ioc.type
            )
        }
    }
    [ <(seen)+ { yield $srcnode } ]

    if $xref {
        [ <(pubioc)+ {yield $xref} ]
    }

    fini{return($lib.null)}
}

function add_pulse_by_id(
    pulseid,
    add_iocs=$lib.false,
    ioc_limit=$modconf.ioc_limit
) {

    if $lib.debug {$lib.print("addPulseById()")}

    $pulse = $api.get_pulse($pulseid)

    yield $add_pulse($pulse, add_iocs=$add_iocs, ioc_limit=$ioc_limit)
}

function add_pdns(n) {
    switch $n.form() {
        "inet:fqdn": {
            $http_resp = $api.get_indicators_domain($n, 'passive_dns')
            $passive_dns = $http_resp.passive_dns
        }
        "inet:ipv4": {
            $http_resp = $api.get_indicators_ip($n, 'passive_dns')
            $passive_dns = $http_resp.passive_dns
        }
        "inet:ipv6": {
            $http_resp = $api.get_indicators_ip($n, 'passive_dns')
            $passive_dns = $http_resp.passive_dns
        }
        *: {
            $lib.warn("Unsupport node form for pdns ({form})", form=$n.form())
            yield $lib.null
        }
    }

    for $entry in $passive_dns {
        if ($entry.address = "NXDOMAIN") {continue}
        yield $add_dns($entry)
    }
}

function add_dns(entry) {

    $rtype = $entry."record_type"

    switch $rtype {
        /*
        * DNS pedantry.
        * SOA records from OTX are pretty bad. They don't provide
        * the full SOA text and will give you an SOA for a
        * "hostname" which is not a zone meaning you could
        * mistakenly define an SOA for say record.zone.tld. rather
        * than zone.tld. There is a difference, people!
        *
        * We check for "asset_type": "domain"
        *
        * Note: The "address" field of a DNS result is the defined
        * nameserver within the SOA record.
        *
        * The email address is missing.
        */
        'SOA': {
            if ($entry.asset_type = "domain") {
                $guid = $lib.guid(
                    $entry.hostname,
                    $entry.address,
                    $entry.first,
                    $entry.last,
                )
                [ inet:dns:soa=$guid :fqdn=$entry.hostname :ns?=$entry.address]
            }
            else {
                if $lib.debug {
                    $lib.print(
                        '{record} ({rtype}) record ignored.',
                        record=$entry.hostname,
                        rtype=$rtype
                    )
                }
            }
        }

        /*
        * DNS pedantry.
        * NS records from OTX are pretty bad. They provide NS
        * records for record.zone.tld. which might not actually be
        * defined in the real DNS zone itself and seems to just be a
        * merge of the NS records for zone.tld. down into what OTX
        * defines as a "hostname" rather than a "domain" asset_type.
        *
        * We check for "asset_type": "domain"
        */
        'NS': {
            if ($entry.asset_type = "domain") {
                [ inet:dns:ns=($entry.hostname, $entry.address) ]
            }
            else {
                if $lib.debug {
                    $lib.warn(
                        '{record} ({rtype}) record ignored.',
                        record=$entry.hostname,
                        rtype=$rtype
                    )
                }
            }
        }

        'AAAA': {
            [ inet:dns:aaaa?=($entry.hostname, $entry.address) ]
        }

        /*
        * TODO: Sometimes OTX DNS records are backwards
        * The hostname is the IP address and the address is the
        * hostname:
        * {
        *   "address": "gmail.com",
        *   "first": "2015-05-06T22:00:00",
        *   "last": "2015-05-06T22:00:00",
        *   "hostname": "74.125.28.18",
        *   "record_type": "A",
        *   "indicator_link": "/indicator/hostname/74.125.28.18",
        *   "flag_url": "assets/images/flags/us.png",
        *   "flag_title": "United States",
        *   "asset_type": "hostname",
        *   "asn": "AS15169 GOOGLE"
        * }
        * Up is down. Left is right! Won't someone please think of the
        * children!
        *
        * WHAT COULD POSSIBLY GO WRONG IF.... we swap around the tuple values?
        */
        'A': {
            [ inet:dns:a?=($entry.hostname, $entry.address) ]
        }

        'CNAME': {
            [ inet:dns:cname=($entry.hostname, $entry.address) ]
        }

        'TXT': {
            $lib.warn('{rtype} type not yet implemented', rtype=$rtype)
        }

        // While not supported anymore SPF was the record type
        // before TXT records were settled on for SPF data. For a
        // time SPF records did exist but it was decided not to use
        // them because many caching resolvers are too old and do
        // not support this lookup. It's still useful to check for
        // their existence in DNS data.
        'SPF': {
            $lib.warn('{rtype} type not yet implemented', rtype=$rtype)
        }

        *: {
            $lib.warn(
                'DNS record type ({rtype}) not supported!',
                rtype=$rtype
            )
        }
    }

    [ .seen?=$entry.first .seen?=$entry.last ]
    [ <(seen)+ { yield $srcnode } ]

    return($node)
}

/*
Alienvault OTX whois records are fucking weird. There can be multiple
dates with no context. E.g.: multiple creation dates, expiration dates.
https://otx.alienvault.com/indicator/domain/bbc-news.org

Using other vendor data going to take the earlier date in the whois
results.
*/
function add_domain_whois(n, api_resp) {

    $whois_data = $api_resp.data
    $fqdn = $n.repr()
    $name_servers = $lib.list()
    $record = $lib.dict()

    for $entry in $whois_data {

        switch $entry.key.strip() {
            "emails": {
                $add_domain_whois_email($fqdn, $entry.value)
            }
            "registrar": {
                $record.registrar = $entry.value
            }
            "creation_date": {
                if $record.created {
                    ($ok, $created) = $lib.trycast(time, $entry.value)
                    if (not $ok) {continue}
                    if ($created < $record.created) {
                        $record.created = $lib.time.format($created, '%Y%m%dT%H:%M:%SZ')
                    }
                }
                else {
                    $record.created = $entry.value
                }
            }
            "updated_date": {
                if $record.updated {
                    ($ok, $updated) = $lib.trycast(time, $entry.value)
                    if (not $ok) {continue}
                    if ($updated < $record.updated) {
                        $record.updated = $lib.time.format($updated, '%Y%m%dT%H:%M:%SZ')
                    }
                }
                else {
                    $record.updated = $entry.value
                }
            }
            "expiration_date": {
                if $record.expires {
                    ($ok, $expired) = $lib.trycast(time, $entry.value)
                    if (not $ok) {continue}
                    if ($expired < $record.expires) {
                        $record.expires = $lib.time.format($expired, '%Y%m%dT%H:%M:%SZ')
                    }
                }
                else {
                    $record.expires = $entry.value
                }
            }
            "name_servers": {
                $name_servers.append(($entry.value))
            }
        }
    }

    // Insert <I don't know what I'm doing meme>
    // I couldn't decide? make? this work in a subquery so fini did the
    // trick.
    fini {
        if (not $record.updated) {
            $lib.warn("No updated date found in whois records!")
            yield $lib.null
        }
        $rec = $add_whois_rec($fqdn, $record)
        for $ns in $name_servers {
            $add_whois_recns($ns, $rec)
        }
        yield $rec
    }
}

function add_whois_rec(fqdn, record) {
    [inet:whois:rec=($fqdn, $record.updated)]
    for ($k, $v) in $record {
        [:$k=$v]
    }
    [ <(seen)+ { yield $srcnode } ]
    return($node)
}

function add_whois_recns(ns, rec) {
    [inet:whois:recns=($ns, $rec.repr())]
    [ <(seen)+ { yield $srcnode } ]
}

function enrich_domain(n) {
    $funcs = $lib.dict(
        // section_name = section_process_function
        "general"       = $add_domain_general,
        //"malware"       = $add_domain_malware,
        //"http_scans"    = $add_domain_http_scans,
        "url_list"      = $add_url_list,
        "whois"         = $add_domain_whois
    )

    for ($section, $func) in $funcs {
        $page = (1)
        $has_next = $lib.true

        while $has_next {
            $http_resp = $api.get_indicators_domain($n, $section, $page)

            if $lib.debug {
                $lib.print(
                    "enrich_d() http_resp: {http_resp}",
                    http_resp=$http_resp
                )
            }

            // TODO: Error handling
            if (not $http_resp) {yield $lib.null}

            $has_next = $http_resp.next
            $page = ($page + 1)

            yield $func($n, $http_resp)
        }
    }
}

function add_domain_general(n, api_resp) {
    $pulses = $api_resp.pulse_info.pulses
    // if $lib.debug {
    //     $lib.print(
    //         "add_domain_general() pulses: {pulses}",
    //         pulses=$pulses
    //     )
    // }
    for $pulse in $pulses {
        yield $add_pulse($pulse, $n)
    }
}

function add_domain_malware(n, api_resp) {
    yield $lib.null
}

function add_domain_http_scans(n, api_resp) {
    yield $lib.null
}

function add_url_list(n, api_resp) {
    for $entry in $api_resp.url_list {
        [inet:url?=$entry.url]
        [ <(seen)+ { yield $srcnode } ]
        yield $node
    }
}

function add_domain_whois_email(fqdn, email) {
    [inet:whois:email=($fqdn, $email)]
    [ <(seen)+ { yield $srcnode } ]
    fini{return($lib.null)}
}

function enrich_ip(n) {
    $funcs = $lib.dict(
        // section_name = section_process_function
        "general"       = $add_ip_general,
        "geo"           = $add_ip_geo,
        //"malware"       = $add_ip_malware,
        //"http_scans"    = $add_ip_http_scans,
        "url_list"      = $add_url_list,
        //"whois"         = $add_ip_whois
    )

    for ($section, $func) in $funcs {
        $page = (1)
        $has_next = $lib.true

        while $has_next {
            $http_resp = $api.get_indicators_ip($n, $section, $page)

            if $lib.debug {
                $lib.print(
                    "enrich_ip() http_resp: {http_resp}",
                    http_resp=$http_resp
                )
            }

            // TODO: Error handling
            if (not $http_resp) {yield $lib.null}

            $has_next = $http_resp.next
            $page = ($page + 1)

            yield $func($n, $http_resp)
        }
    }
}

function add_ip_general(n, api_resp) {
    if $api_resp.validation {
        for $entry in $api_resp.validation {
            ($ok, $t) = $lib.trycast(syn:tag:part, $entry.source)
            $tag = $lib.str.format(
                'rep.alienvault.{leaf}',
                leaf=$t
            )
            $form = $n.form()
            $val = $n.repr()
            [*$form=$val +#$tag]
        }
    }
    $pulses = $api_resp.pulse_info.pulses
    // if $lib.debug {
    //     $lib.print(
    //         "add_domain_general() pulses: {pulses}",
    //         pulses=$pulses
    //     )
    // }
    for $pulse in $pulses {
        yield $add_pulse($pulse, $n)
    }
}

function add_ip_geo(n, api_resp) {
    $form = $n.form()
    $val = $n.repr()
    [*$form=$val :loc=$api_resp.country_code2]

    if $api_resp.asn {
        $m = $lib.regex.search("^AS([0-9]{1,10})\s", $api_resp.asn)
        if $m {
            [:asn=$m.index(0)]
        }
    }
    fini{return($lib.null)}
}

function file_general(n) {
}

// EOF
