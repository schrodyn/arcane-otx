/*
* Arcane OTX Privsep Module
* Privileged code goes here
*/

init {
    if $lib.debug { $lib.print("Arcane OTX Privsep Module") }
    /*
    * Import Arcane OTX setup module:
    *  - get API Key functions
    */
    $setup = $lib.import(arcane.otx.setup)
}

function test() {
    $lib.print("Arcane OTX Privsep test()")
    $apiKey = $setup.getApiKey()
    $lib.print("Arcane OTX API Key: {apiKey}", apiKey=$apiKey)
    return($lib.null)
}

/*
* Get domain indicators by section name.
*  - /api/v1/indicators/domain/:domain/:section
*
* Available sections:
*  - malware
*  - passive_dns
*  - whois
*/
function getIndicatorsDomain(arg_node, section) {

    $api_base_url = $modconf.api_url

    $domain = $arg_node.repr()

    if $lib.debug {
        $lib.print(
            'Looking up {section} for domain: {domain}',
            domain=$domain,
            section=$section
        )
    }

    $api_url = $lib.str.format(
        "{api_base_url}/indicators/domain/{domain}/{section}",
        api_base_url=$api_base_url,
        domain=$domain,
        section=$section
    )

    return($http_get($api_url))
}

function getIndicatorsIPv4(arg_node, section) {

    $api_base_url = $modconf.api_url

    $ipv4 = $arg_node.repr()

    if $lib.debug {
        $lib.print(
            'Looking up {section} for IPv4: {ipv4}',
            ipv4=$ipv4,
            section=$section
        )
    }

    $api_url = $lib.str.format(
        "{api_base_url}/indicators/IPv4/{ipv4}/{section}",
        api_base_url=$api_base_url,
        ipv4=$ipv4,
        section=$section
    )

    return($http_get($api_url))
}

function getIndicatorsIPv6(arg_node, section) {

    $api_base_url = $modconf.api_url

    $ipv6 = $arg_node.repr()

    if $lib.debug {
        $lib.print(
            'Looking up {section} for IPv6: {ipv6}',
            ipv6=$ipv6,
            section=$section
        )
    }

    $api_url = $lib.str.format(
        "{api_base_url}/indicators/IPv6/{ipv6}/{section}",
        api_base_url=$api_base_url,
        ipv6=$ipv6,
        section=$section
    )

    return($http_get($api_url))
}

function getPulse(pulseid) {

    $api_base_url = $modconf.api_url

    if $lib.debug {
        $lib.print(
            'Retrieving pulse {pulseid}',
            pulseid=$pulseid
        )
    }

    $api_url = $lib.str.format(
        "{api_base_url}/pulses/{pulseid}",
        api_base_url=$api_base_url,
        pulseid=$pulseid
    )

    if $lib.debug { $lib.print($api_url) }

    return($http_get($api_url))
}

function getPulseIndicators(pulseid) {

    $api_base_url = $modconf.api_url

    if $lib.debug {
        $lib.print(
            'Retrieving indicators for {pulseid}',
            pulseid=$pulseid
        )
    }

    $api_url = $lib.str.format(
        "{api_base_url}/pulses/{pulseid}/indicators",
        api_base_url=$api_base_url,
        pulseid=$pulseid
    )

    if $lib.debug { $lib.print($api_url) }

    $params = $lib.dict(page=$page)

    return($http_get($api_url, $params))
}

function getUrls(n, page) {

    $api_base_url = $modconf.api_url

    if $lib.debug {
        $lib.print(
            'Retrieving urls for {ioc}',
            ioc=$n.repr()
        )
    }

    switch $n.form() {
        "inet:fqdn" : {
            $api_url = $lib.str.format(
                "{api_base_url}/indicators/domain/{ioc}/url_list",
                api_base_url=$api_base_url,
                ioc=$n.repr()
            )
        }
        "inet:ipv4" : {
            $api_url = $lib.str.format(
                "{api_base_url}/indicators/IPv4/{ioc}/url_list",
                api_base_url=$api_base_url,
                ioc=$n.repr()
            )
        }
        "inet:ipv6" : {
            $api_url = $lib.str.format(
                "{api_base_url}/indicators/IPv6/{ioc}/url_list",
                api_base_url=$api_base_url,
                ioc=$n.repr()
            )
        }
        *: {
            $lib.warn("Unsupported ioc type ({ioc_type})", ioc_type=$n.form())
            return($lib.null)
        }
    }

    if $lib.debug { $lib.print($api_url) }

    $params = $lib.dict(page=$page)

    return($http_get($api_url, $params))
}
function http_get(api_url, params=$lib.null) {

    $apikey = $setup.getApiKey()

    if $lib.debug { $lib.print('API URL {url}', url=$api_url) }

    $headers = $lib.dict(
        "Accept" = "application/json",
        "X-OTX-API-KEY" = $apikey
    )

    $resp = $lib.inet.http.get($api_url, headers=$headers, params=$params)

    if ($resp.code != 200) {
        $lib.warn(
            "OTX API ({api_url}) returned HTTP code: {code}",
            api_url=$api_url,
            code=$resp.code
        )
        return($lib.null)
    }

    return($resp.json())
}

function getPulsesActivity(page, since=$lib.null) {

    $api_base_url = $modconf.api_url

    if $lib.debug {
        $lib.print(
            'Retrieving pulses activity since {since}',
            since=$since
        )
    }

    $api_url = $lib.str.format(
        "{api_base_url}/pulses/activity",
        api_base_url=$api_base_url
    )

    if $lib.debug { $lib.print($api_url) }

    $params = $lib.dict(
        page=$page
    )

    if $since {
        $params.modified_since=$since
    }

    return($http_get($api_url, $params))
}
