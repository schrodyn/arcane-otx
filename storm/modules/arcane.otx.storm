/*

Top level Alienvault OTX module.

*/

$ingest = $lib.import("arcane.otx.ingest")
$api = $lib.import("arcane.otx.api")

function pdns(n, asof) {
    if $lib.debug {
        $lib.print('[arcane::otx::pdns]')
    }

    switch $n.form() {
        "inet:fqdn": {
            yield $get_add_pdns($n, $asof)
        }
        "inet:ipv4": {
            yield $get_add_pdns($n, $asof)
        }
        "inet:ipv6": {
            yield $get_add_pdns($n, $asof)
        }
        *: {
            $lib.warn("[arcane::otx::pdns] Unsupported node: {n}", n=$n.ndef())
        }
    }
}

function get_add_pdns(n, asof) {
    if $lib.debug {
        $lib.print('[arcane::otx::get_add_pdns]')
    }

    switch $n.form() {
        "inet:ipv4": {
            $api_resp = $api.get_indicators_ip($n, 'passive_dns', asof=$asof)
        }
        "inet:ipv6": {
            $api_resp = $api.get_indicators_ip($n, 'passive_dns', asof=$asof)
        }
        "inet:fqdn": {
            $api_resp = $api.get_indicators_domain($n, 'passive_dns', asof=$asof)
        }
    }

    yield $add_pdns($n, $api_resp)
}

function add_pdns(n, api_resp) {
    if $lib.debug {
        $lib.print('[arcane::otx::add_pdns]')
    }

    $passive_dns = $api_resp.passive_dns
    for $entry in $passive_dns {
        if ($entry.address = "NXDOMAIN") {continue}
        yield $ingest.add_dns($entry, $n)
    }
}

/* Create a media:news node from OTX Pules.

This creates a media:news node from an OTX Pulese ID. Pulese information is
always retrieved and used for secondary properties. Optional is to retrieve
indicators for each pulse ID provided.
*/
function pulses(
    pulseids,
    asof,
    add_iocs,
    n=$lib.null
) {

    if $lib.debug {
        $lib.print('[arcane::otx::pulses]')
    }

    for $pulseid in $pulseids {
        $pulse = $api.get_pulse($pulseid, $asof)
        if (not $pulse) {continue}

        $media_node = $ingest.add_pulse($pulse, $n)

        if $add_iocs {
            if $lib.debug {
                $lib.print('[arcane::otx::pulses] Adding IOCs')
            }

            for $ioc in $api.emit_pulse_indicators($pulseid, $asof) {
                $ingest.add_pulse_ioc($ioc, $pulse.tags, $media_node)
            }
        }
        yield $media_node
    }
}

function enrich_domain(n, asof) {
    if $lib.debug {
        $lib.print('[arcane::otx::enrich_domain]')
    }

    tee -p {
        yield $enrich_domain_by_section($n, "general", $asof)
    }
    {
        yield $enrich_domain_by_section($n, "passive_dns", $asof)
    }
    {
        yield $enrich_domain_by_section($n, "http_scans", $asof)
    }
    {
        yield $enrich_domain_by_section($n, "url_list", $asof)
    }
    {
        yield $enrich_domain_by_section($n, "whois", $asof)
    }
}

function enrich_domain_by_section(n, section, asof) {

    if $lib.debug {
        $lib.print('[arcane::otx::enrich_domain_by_section]')
    }

    $f_genr = ({
        "general": $add_domain_general,
        "http_scans": $ingest.add_domain_http_scans,
        "url_list": $ingest.add_url_list,
        "passive_dns": $add_pdns,
        "whois": $ingest.add_domain_whois
    })

    $func = $f_genr.$section
    $page = (1)
    $has_next = $lib.true

    while $has_next {
        $http_resp = $api.get_indicators_domain($n, $section, $page, $asof)
        if (not $http_resp) {break}
        $has_next = $http_resp.next
        $page = ($page + 1)
        yield $func($n, $http_resp)
    }
}

function add_domain_http_scans(n, asof) {
    if $lib.debug {
        $lib.print('[arcane::otx::add_domain_http_scans]')
    }

    $page = (1)
    $has_next = $lib.true

    while $has_next {
        $http_resp = $api.get_indicators_domain(
                        $n, "http_scans", $page, $asof
                     )

        if (not $http_resp) {break}
        $has_next = $http_resp.next
        $page = ($page + 1)
        yield $ingest.add_domain_http_scans($n, $http_resp)
    }
}

/*function add_url_list(n, asof) {
    if $lib.debug {
        $lib.print('[arcane::otx::add_url_list]')
    }

    $page = (1)
    $has_next = $lib.true

    while $has_next {
        $http_resp = $api.get_indicators_domain(
                        $n, "url_list", $page, $asof
                     )

        if (not $http_resp) {break}
        $has_next = $http_resp.next
        $page = ($page + 1)
        yield $ingest.add_url_list($n, $http_resp)
    }
}*/

function add_domain_whois(n, asof) {
    if $lib.debug {
        $lib.print('[arcane::otx::add_domain_whois]')
    }

    $page = (1)
    $has_next = $lib.true

    while $has_next {
        $http_resp = $api.get_indicators_domain(
                        $n, "whois", $page, $asof
                     )

        if (not $http_resp) {break}
        $has_next = $http_resp.next
        $page = ($page + 1)
        yield $ingest.add_domain_whois($n, $http_resp)
    }
}

// TODO Add xref
function add_domain_general(n, api_resp) {
    if $lib.debug {
        $lib.print('[arcane::otx::add_domain_general]')
    }
    $pulse_ids = $lib.list()
    for $pulse in $api_resp.pulse_info.pulses {
        $pulse_ids.append($pulse.id)
    }
    // Just get the pulses. Don't retrieve the IOCs too.
    yield $pulses($pulse_ids, "-30 days", $lib.false, 0, $n)
}

function pulses_subscribed(
    since,
    asof,
    add_iocs,
    ioc_limit
) {
    if $lib.debug {
        $lib.print('[arcane::otx::pulses_subscribed]')
    }

    ($ok, $modified_since) = $lib.trycast(time, $since)
    if (not $ok) {
        $lib.warn("Invalid time format ({since})", since=$since)
        yield $lib.null
    }

    $page=(1)
    $next_page = $lib.true

    $modified_since = $lib.time.format(
        $modified_since,
        '%Y-%m-%dT%H:%M:%S+00:00'
    )

    // Going to collect all the IDs for subscribed pulses and then perform
    // additional requests to get indicators for each pulse. The reason for
    // this is observations made during API testing seems to indicate that I
    // won't get all the indicators of a pulse and the documentation doesn't
    // really explain why. Perhaps I'm only getting indicators that were
    // modified within a certain period. Don't know, don't care. Hammer time.
    $pulse_ids = $lib.list()

    // New workflow:
    // 1. Get subscribed pulses.
    // 2. Get entire pulse.
    // 3. Yield nodes.
    while ($next_page != $lib.null) {

        $http_resp = $api.get_pulses_subscribed(
            $modified_since,
            $page,
            $asof
        )

        $results = $http_resp.results
        $page = ($page + 1)
        $next_page = $http_resp.next

        for $pulse in $results {
            $pulse_ids.append($pulse.id)
        }
    }

    yield $pulses($pulse_ids, $asof, $add_iocs)
}

function pulses_byusername(
    username,
    since,
    asof,
    add_iocs,
    ioc_limit
) {
    if $lib.debug {
        $lib.print('[arcane::otx::pulses_byusername]')
    }

    ($ok, $modified_since) = $lib.trycast(time, $since)
    if (not $ok) {
        $lib.warn("Invalid time format ({since})", since=$since)
        yield $lib.null
    }

    $page=(1)
    $next_page = $lib.true

    $modified_since = $lib.time.format(
        $modified_since,
        '%Y-%m-%dT%H:%M:%S+00:00'
    )

    $pulse_ids = $lib.list()

    while ($next_page != $lib.null) {
        $http_resp = $api.get_pulses_username(
            $username,
            $modified_since,
            $page,
            $asof
        )

        $results = $http_resp.results
        $page = ($page + 1)
        $next_page = $http_resp.next

        for $pulse in $results {
            $pulse_ids.append($pulse.id)
        }
    }

    yield $pulses($pulse_ids, $asof, $add_iocs)
}
function enrich_ip(n, asof) {

    if $lib.debug {
        $lib.print('[arcane::otx::enrich_ip]')
    }

    // section_name = section_process_function
    $f_genr = ({
        "general": $add_ip_general,
        "geo": $ingest.add_ip_geo,
        "http_scans": $ingest.add_domain_http_scans,
        "url_list": $ingest.add_url_list,
        "passive_dns": $add_pdns,
    })

    for ($section, $func) in $f_genr {
        $page = (1)
        $has_next = $lib.true

        while $has_next {
            $http_resp = $api.get_indicators_ip(
                            $n, $section, $page, $asof
                         )

            if (not $http_resp) {break}
            $has_next = $http_resp.next
            $page = ($page + 1)
            yield $func($n, $http_resp)
        }
    }
}

function add_ip_general(n, api_resp) {
    if $lib.debug {
        $lib.print('[arcane::otx::add_ip_general]')
    }
    $pulse_ids = $lib.list()
    for $pulse in $api_resp.pulse_info.pulses {
        $pulse_ids.append($pulse.id)
    }
    // Just get the pulses. Don't retrieve the IOCs too.
    yield $pulses($pulse_ids, "-30 days", $lib.false, $n)
}
// EOF
